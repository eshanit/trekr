{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/ion-breadcrumbs.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nimport { b as getIonMode } from './ionic-global.js';\n\nconst breadcrumbsIosCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px;padding-top:0;padding-bottom:0;-ms-flex-pack:center;justify-content:center}\";\n\nconst breadcrumbsMdCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:0;padding-bottom:0}\";\n\nconst Breadcrumbs = /*@__PURE__*/ proxyCustomElement(class Breadcrumbs extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionCollapsedClick = createEvent(this, \"ionCollapsedClick\", 7);\n    this.breadcrumbsInit = () => {\n      this.setBreadcrumbSeparator();\n      this.setMaxItems();\n    };\n    this.resetActiveBreadcrumb = () => {\n      const breadcrumbs = this.getBreadcrumbs();\n      // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n      const activeBreadcrumb = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n      if (activeBreadcrumb && this.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n    this.setMaxItems = () => {\n      const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      for (const breadcrumb of breadcrumbs) {\n        breadcrumb.showCollapsedIndicator = false;\n        breadcrumb.collapsed = false;\n      }\n      // If the number of breadcrumbs exceeds the maximum number of items\n      // that should show and the items before / after collapse do not\n      // exceed the maximum items then we need to collapse the breadcrumbs\n      const shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach((breadcrumb, index) => {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          }\n          // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n    this.setBreadcrumbSeparator = () => {\n      const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n      const breadcrumbs = this.getBreadcrumbs();\n      // Check if an active breadcrumb exists already\n      const active = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n      // Set the separator on all but the last breadcrumb\n      for (const breadcrumb of breadcrumbs) {\n        // The only time the last breadcrumb changes is when\n        // itemsAfterCollapse is set to 0, in this case the\n        // last breadcrumb will be the collapsed indicator\n        const last = maxItems !== undefined && itemsAfterCollapse === 0\n          ? breadcrumb === breadcrumbs[itemsBeforeCollapse]\n          : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n        breadcrumb.last = last;\n        // If the breadcrumb has defined whether or not to show the\n        // separator then use that value, otherwise check if it's the\n        // last breadcrumb\n        const separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n        breadcrumb.separator = separator;\n        // If there is not an active breadcrumb already\n        // set the last one to active\n        if (!active && last) {\n          breadcrumb.active = true;\n          this.activeChanged = true;\n        }\n      }\n    };\n    this.getBreadcrumbs = () => {\n      return Array.from(this.el.querySelectorAll('ion-breadcrumb'));\n    };\n    this.slotChanged = () => {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    };\n    this.collapsed = undefined;\n    this.activeChanged = undefined;\n    this.color = undefined;\n    this.maxItems = undefined;\n    this.itemsBeforeCollapse = 1;\n    this.itemsAfterCollapse = 1;\n  }\n  onCollapsedClick(ev) {\n    const breadcrumbs = this.getBreadcrumbs();\n    const collapsedBreadcrumbs = breadcrumbs.filter((breadcrumb) => breadcrumb.collapsed);\n    this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), { collapsedBreadcrumbs }));\n  }\n  maxItemsChanged() {\n    this.resetActiveBreadcrumb();\n    this.breadcrumbsInit();\n  }\n  componentWillLoad() {\n    this.breadcrumbsInit();\n  }\n  render() {\n    const { color, collapsed } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'breadcrumbs-collapsed': collapsed,\n      }) }, h(\"slot\", { onSlotchange: this.slotChanged })));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"maxItems\": [\"maxItemsChanged\"],\n    \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n    \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n  }; }\n  static get style() { return {\n    ios: breadcrumbsIosCss,\n    md: breadcrumbsMdCss\n  }; }\n}, [33, \"ion-breadcrumbs\", {\n    \"color\": [513],\n    \"maxItems\": [2, \"max-items\"],\n    \"itemsBeforeCollapse\": [2, \"items-before-collapse\"],\n    \"itemsAfterCollapse\": [2, \"items-after-collapse\"],\n    \"collapsed\": [32],\n    \"activeChanged\": [32]\n  }, [[0, \"collapsedClick\", \"onCollapsedClick\"]], {\n    \"maxItems\": [\"maxItemsChanged\"],\n    \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n    \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-breadcrumbs\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-breadcrumbs\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Breadcrumbs);\n      }\n      break;\n  } });\n}\n\nconst IonBreadcrumbs = Breadcrumbs;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonBreadcrumbs, defineCustomElement };\n",
      "start": 1700143040987,
      "end": 1700143041091,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143041091,
      "end": 1700143041091,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143041091,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143041092,
      "end": 1700143041092,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143041092,
      "end": 1700143041093,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143041093,
      "end": 1700143041093,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143041093,
      "end": 1700143041093,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143041093,
      "end": 1700143041093,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143041093,
      "end": 1700143041093,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143041093,
      "end": 1700143041093,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143041093,
      "end": 1700143041093,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143041093,
      "end": 1700143041094,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143041094,
      "end": 1700143041094,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143041094,
      "end": 1700143041094,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143041094,
      "end": 1700143041094,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700143041094,
      "end": 1700143041094,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700143041094,
      "end": 1700143041094,
      "order": "normal"
    }
  ]
}
