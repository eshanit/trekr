{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/ion-refresher-content.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config.js';\nimport { c as config, b as getIonMode, a as isPlatform } from './ionic-global.js';\nimport { n as caretBackSharp, o as arrowDown } from './index7.js';\nimport { d as defineCustomElement$2, S as SPINNERS } from './spinner.js';\nimport { d as defineCustomElement$3 } from './icon.js';\n\nconst RefresherContent = /*@__PURE__*/ proxyCustomElement(class RefresherContent extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.pullingIcon = undefined;\n    this.pullingText = undefined;\n    this.refreshingSpinner = undefined;\n    this.refreshingText = undefined;\n  }\n  componentWillLoad() {\n    if (this.pullingIcon === undefined) {\n      const mode = getIonMode(this);\n      const overflowRefresher = this.el.style.webkitOverflowScrolling !== undefined ? 'lines' : arrowDown;\n      this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && isPlatform('mobile') ? config.get('spinner', overflowRefresher) : 'circular');\n    }\n    if (this.refreshingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n    }\n  }\n  renderPullingText() {\n    const { customHTMLEnabled, pullingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\n    }\n    return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\n  }\n  renderRefreshingText() {\n    const { customHTMLEnabled, refreshingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\n    }\n    return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\n  }\n  render() {\n    const pullingIcon = this.pullingIcon;\n    const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n    const mode = getIonMode(this);\n    return (h(Host, { class: mode }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"div\", { class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { class: \"arrow-container\" }, h(\"ion-icon\", { icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\n  }\n  get el() { return this; }\n}, [0, \"ion-refresher-content\", {\n    \"pullingIcon\": [1025, \"pulling-icon\"],\n    \"pullingText\": [1, \"pulling-text\"],\n    \"refreshingSpinner\": [1025, \"refreshing-spinner\"],\n    \"refreshingText\": [1, \"refreshing-text\"]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-refresher-content\", \"ion-icon\", \"ion-spinner\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-refresher-content\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, RefresherContent);\n      }\n      break;\n    case \"ion-icon\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$3();\n      }\n      break;\n    case \"ion-spinner\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$2();\n      }\n      break;\n  } });\n}\n\nconst IonRefresherContent = RefresherContent;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonRefresherContent, defineCustomElement };\n",
      "start": 1700143041302,
      "end": 1700143041429,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143041429,
      "end": 1700143041429,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143041429,
      "end": 1700143041430,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700143041430,
      "end": 1700143041430,
      "order": "normal"
    }
  ]
}
