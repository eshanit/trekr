{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/ion-app.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, Build, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config, a as isPlatform } from './ionic-global.js';\n\nconst appCss = \"html.plt-mobile ion-app{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}html.plt-mobile ion-app [contenteditable]{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}ion-app.force-statusbar-padding{--ion-safe-area-top:20px}\";\n\nconst App = /*@__PURE__*/ proxyCustomElement(class App extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n  }\n  componentDidLoad() {\n    if (Build.isBrowser) {\n      rIC(async () => {\n        const isHybrid = isPlatform(window, 'hybrid');\n        if (!config.getBoolean('_testing')) {\n          import('./index9.js').then((module) => module.startTapClick(config));\n        }\n        if (config.getBoolean('statusTap', isHybrid)) {\n          import('./status-tap.js').then((module) => module.startStatusTap());\n        }\n        if (config.getBoolean('inputShims', needInputShims())) {\n          /**\n           * needInputShims() ensures that only iOS and Android\n           * platforms proceed into this block.\n           */\n          const platform = isPlatform(window, 'ios') ? 'ios' : 'android';\n          import('./input-shims.js').then((module) => module.startInputShims(config, platform));\n        }\n        const hardwareBackButtonModule = await import('./hardware-back-button.js');\n        if (config.getBoolean('hardwareBackButton', isHybrid)) {\n          hardwareBackButtonModule.startHardwareBackButton();\n        }\n        else {\n          hardwareBackButtonModule.blockHardwareBackButton();\n        }\n        if (typeof window !== 'undefined') {\n          import('./keyboard2.js').then((module) => module.startKeyboardAssist(window));\n        }\n        import('./focus-visible.js').then((module) => (this.focusVisible = module.startFocusVisible()));\n      });\n    }\n  }\n  /**\n   * @internal\n   * Used to set focus on an element that uses `ion-focusable`.\n   * Do not use this if focusing the element as a result of a keyboard\n   * event as the focus utility should handle this for us. This method\n   * should be used when we want to programmatically focus an element as\n   * a result of another user action. (Ex: We focus the first element\n   * inside of a popover when the user presents it, but the popover is not always\n   * presented as a result of keyboard action.)\n   */\n  async setFocus(elements) {\n    if (this.focusVisible) {\n      this.focusVisible.setFocus(elements);\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'ion-page': true,\n        'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding'),\n      } }));\n  }\n  get el() { return this; }\n  static get style() { return appCss; }\n}, [0, \"ion-app\", {\n    \"setFocus\": [64]\n  }]);\nconst needInputShims = () => {\n  /**\n   * iOS always needs input shims\n   */\n  const needsShimsIOS = isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n  if (needsShimsIOS) {\n    return true;\n  }\n  /**\n   * Android only needs input shims when running\n   * in the browser and only if the browser is using the\n   * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/\n   */\n  const isAndroidMobileWeb = isPlatform(window, 'android') && isPlatform(window, 'mobileweb');\n  if (isAndroidMobileWeb) {\n    return true;\n  }\n  return false;\n};\nconst rIC = (callback) => {\n  if ('requestIdleCallback' in window) {\n    window.requestIdleCallback(callback);\n  }\n  else {\n    setTimeout(callback, 32);\n  }\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-app\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-app\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, App);\n      }\n      break;\n  } });\n}\n\nconst IonApp = App;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonApp, defineCustomElement };\n",
      "start": 1700143041463,
      "end": 1700143041640,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143041640,
      "end": 1700143041640,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143041640,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143041641,
      "end": 1700143041641,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper\";/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, Build, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config, a as isPlatform } from './ionic-global.js';\n\nconst appCss = \"html.plt-mobile ion-app{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}html.plt-mobile ion-app [contenteditable]{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}ion-app.force-statusbar-padding{--ion-safe-area-top:20px}\";\n\nconst App = /*@__PURE__*/ proxyCustomElement(class App extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n  }\n  componentDidLoad() {\n    if (Build.isBrowser) {\n      rIC(async () => {\n        const isHybrid = isPlatform(window, 'hybrid');\n        if (!config.getBoolean('_testing')) {\n          __vitePreload(() => import('./index9.js'),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then((module) => module.startTapClick(config));\n        }\n        if (config.getBoolean('statusTap', isHybrid)) {\n          __vitePreload(() => import('./status-tap.js'),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then((module) => module.startStatusTap());\n        }\n        if (config.getBoolean('inputShims', needInputShims())) {\n          /**\n           * needInputShims() ensures that only iOS and Android\n           * platforms proceed into this block.\n           */\n          const platform = isPlatform(window, 'ios') ? 'ios' : 'android';\n          __vitePreload(() => import('./input-shims.js'),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then((module) => module.startInputShims(config, platform));\n        }\n        const hardwareBackButtonModule = await __vitePreload(() => import('./hardware-back-button.js'),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url);\n        if (config.getBoolean('hardwareBackButton', isHybrid)) {\n          hardwareBackButtonModule.startHardwareBackButton();\n        }\n        else {\n          hardwareBackButtonModule.blockHardwareBackButton();\n        }\n        if (typeof window !== 'undefined') {\n          __vitePreload(() => import('./keyboard2.js'),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then((module) => module.startKeyboardAssist(window));\n        }\n        __vitePreload(() => import('./focus-visible.js'),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then((module) => (this.focusVisible = module.startFocusVisible()));\n      });\n    }\n  }\n  /**\n   * @internal\n   * Used to set focus on an element that uses `ion-focusable`.\n   * Do not use this if focusing the element as a result of a keyboard\n   * event as the focus utility should handle this for us. This method\n   * should be used when we want to programmatically focus an element as\n   * a result of another user action. (Ex: We focus the first element\n   * inside of a popover when the user presents it, but the popover is not always\n   * presented as a result of keyboard action.)\n   */\n  async setFocus(elements) {\n    if (this.focusVisible) {\n      this.focusVisible.setFocus(elements);\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        'ion-page': true,\n        'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding'),\n      } }));\n  }\n  get el() { return this; }\n  static get style() { return appCss; }\n}, [0, \"ion-app\", {\n    \"setFocus\": [64]\n  }]);\nconst needInputShims = () => {\n  /**\n   * iOS always needs input shims\n   */\n  const needsShimsIOS = isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n  if (needsShimsIOS) {\n    return true;\n  }\n  /**\n   * Android only needs input shims when running\n   * in the browser and only if the browser is using the\n   * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/\n   */\n  const isAndroidMobileWeb = isPlatform(window, 'android') && isPlatform(window, 'mobileweb');\n  if (isAndroidMobileWeb) {\n    return true;\n  }\n  return false;\n};\nconst rIC = (callback) => {\n  if ('requestIdleCallback' in window) {\n    window.requestIdleCallback(callback);\n  }\n  else {\n    setTimeout(callback, 32);\n  }\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-app\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-app\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, App);\n      }\n      break;\n  } });\n}\n\nconst IonApp = App;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonApp, defineCustomElement };\n",
      "start": 1700143041641,
      "end": 1700143041642,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1700143041642,
      "end": 1700143041642,
      "order": "normal"
    }
  ]
}
