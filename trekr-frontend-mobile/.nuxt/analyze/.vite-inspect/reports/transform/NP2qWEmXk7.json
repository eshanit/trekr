{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/input.utils.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index5.js';\nimport { r as raf } from './helpers.js';\nimport { a as printIonError } from './index6.js';\n\n/**\n * Used to update a scoped component that uses emulated slots. This fires when\n * content is passed into the slot or when the content inside of a slot changes.\n * This is not needed for components using native slots in the Shadow DOM.\n * @internal\n * @param el The host element to observe\n * @param slotName mutationCallback will fire when nodes on this slot change\n * @param mutationCallback The callback to fire whenever the slotted content changes\n */\nconst createSlotMutationController = (el, slotName, mutationCallback) => {\n  let hostMutationObserver;\n  let slottedContentMutationObserver;\n  if (win !== undefined && 'MutationObserver' in win) {\n    hostMutationObserver = new MutationObserver((entries) => {\n      for (const entry of entries) {\n        for (const node of entry.addedNodes) {\n          /**\n           * Check to see if the added node\n           *  is our slotted content.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            /**\n             * If so, we want to watch the slotted\n             * content itself for changes. This lets us\n             * detect when content inside of the slot changes.\n             */\n            mutationCallback();\n            /**\n             * Adding the listener in an raf\n             * waits until Stencil moves the slotted element\n             * into the correct place in the event that\n             * slotted content is being added.\n             */\n            raf(() => watchForSlotChange(node));\n            return;\n          }\n        }\n      }\n    });\n    hostMutationObserver.observe(el, {\n      childList: true,\n    });\n  }\n  /**\n   * Listen for changes inside of the slotted content.\n   * We can listen for subtree changes here to be\n   * informed of text within the slotted content\n   * changing. Doing this on the host is possible\n   * but it is much more expensive to do because\n   * it also listens for changes to the internals\n   * of the component.\n   */\n  const watchForSlotChange = (slottedEl) => {\n    var _a;\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n    slottedContentMutationObserver = new MutationObserver((entries) => {\n      mutationCallback();\n      for (const entry of entries) {\n        for (const node of entry.removedNodes) {\n          /**\n           * If the element was removed then we\n           * need to destroy the MutationObserver\n           * so the element can be garbage collected.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            destroySlottedContentObserver();\n          }\n        }\n      }\n    });\n    /**\n     * Listen for changes inside of the element\n     * as well as anything deep in the tree.\n     * We listen on the parentElement so that we can\n     * detect when slotted element itself is removed.\n     */\n    slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, { subtree: true, childList: true });\n  };\n  const destroy = () => {\n    if (hostMutationObserver) {\n      hostMutationObserver.disconnect();\n      hostMutationObserver = undefined;\n    }\n    destroySlottedContentObserver();\n  };\n  const destroySlottedContentObserver = () => {\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n  };\n  return {\n    destroy,\n  };\n};\n\nconst getCounterText = (value, maxLength, counterFormatter) => {\n  const valueLength = value == null ? 0 : value.toString().length;\n  const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n  /**\n   * If developers did not pass a custom formatter,\n   * use the default one.\n   */\n  if (counterFormatter === undefined) {\n    return defaultCounterText;\n  }\n  /**\n   * Otherwise, try to use the custom formatter\n   * and fallback to the default formatter if\n   * there was an error.\n   */\n  try {\n    return counterFormatter(valueLength, maxLength);\n  }\n  catch (e) {\n    printIonError('Exception in provided `counterFormatter`.', e);\n    return defaultCounterText;\n  }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n  return `${length} / ${maxlength}`;\n};\n\nexport { createSlotMutationController as c, getCounterText as g };\n",
      "start": 1700143042177,
      "end": 1700143042339,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143042340,
      "end": 1700143042340,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143042340,
      "end": 1700143042341,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700143042341,
      "end": 1700143042341,
      "order": "normal"
    }
  ]
}
