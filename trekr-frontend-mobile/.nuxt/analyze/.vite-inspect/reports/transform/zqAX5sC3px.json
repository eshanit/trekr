{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/radio-group.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { e as renderHiddenInput } from './helpers.js';\nimport { b as getIonMode } from './ionic-global.js';\n\nconst RadioGroup = /*@__PURE__*/ proxyCustomElement(class RadioGroup extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n    this.inputId = `ion-rg-${radioGroupIds++}`;\n    this.labelId = `${this.inputId}-lbl`;\n    this.setRadioTabindex = (value) => {\n      const radios = this.getRadios();\n      // Get the first radio that is not disabled and the checked one\n      const first = radios.find((radio) => !radio.disabled);\n      const checked = radios.find((radio) => radio.value === value && !radio.disabled);\n      if (!first && !checked) {\n        return;\n      }\n      // If an enabled checked radio exists, set it to be the focusable radio\n      // otherwise we default to focus the first radio\n      const focusable = checked || first;\n      for (const radio of radios) {\n        const tabindex = radio === focusable ? 0 : -1;\n        radio.setButtonTabindex(tabindex);\n      }\n    };\n    this.onClick = (ev) => {\n      ev.preventDefault();\n      /**\n       * The Radio Group component mandates that only one radio button\n       * within the group can be selected at any given time. Since `ion-radio`\n       * is a shadow DOM component, it cannot natively perform this behavior\n       * using the `name` attribute.\n       */\n      const selectedRadio = ev.target && ev.target.closest('ion-radio');\n      if (selectedRadio && selectedRadio.disabled === false) {\n        const currentValue = this.value;\n        const newValue = selectedRadio.value;\n        if (newValue !== currentValue) {\n          this.value = newValue;\n          this.emitValueChange(ev);\n        }\n        else if (this.allowEmptySelection) {\n          this.value = undefined;\n          this.emitValueChange(ev);\n        }\n      }\n    };\n    this.allowEmptySelection = false;\n    this.name = this.inputId;\n    this.value = undefined;\n  }\n  valueChanged(value) {\n    this.setRadioTabindex(value);\n    this.ionValueChange.emit({ value });\n  }\n  componentDidLoad() {\n    /**\n     * There's an issue when assigning a value to the radio group\n     * within the Angular primary content (rendering within the\n     * app component template). When the template is isolated to a route,\n     * the value is assigned correctly.\n     * To address this issue, we need to ensure that the watcher is\n     * called after the component has finished loading,\n     * allowing the emit to be dispatched correctly.\n     */\n    this.valueChanged(this.value);\n  }\n  async connectedCallback() {\n    // Get the list header if it exists and set the id\n    // this is used to set aria-labelledby\n    const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n    if (header) {\n      const label = (this.label = header.querySelector('ion-label'));\n      if (label) {\n        this.labelId = label.id = this.name + '-lbl';\n      }\n    }\n  }\n  getRadios() {\n    return Array.from(this.el.querySelectorAll('ion-radio'));\n  }\n  /**\n   * Emits an `ionChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  emitValueChange(event) {\n    const { value } = this;\n    this.ionChange.emit({ value, event });\n  }\n  onKeydown(ev) {\n    const inSelectPopover = !!this.el.closest('ion-select-popover');\n    if (ev.target && !this.el.contains(ev.target)) {\n      return;\n    }\n    // Get all radios inside of the radio group and then\n    // filter out disabled radios since we need to skip those\n    const radios = this.getRadios().filter((radio) => !radio.disabled);\n    // Only move the radio if the current focus is in the radio group\n    if (ev.target && radios.includes(ev.target)) {\n      const index = radios.findIndex((radio) => radio === ev.target);\n      const current = radios[index];\n      let next;\n      // If hitting arrow down or arrow right, move to the next radio\n      // If we're on the last radio, move to the first radio\n      if (['ArrowDown', 'ArrowRight'].includes(ev.key)) {\n        next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n      }\n      // If hitting arrow up or arrow left, move to the previous radio\n      // If we're on the first radio, move to the last radio\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.key)) {\n        next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n      }\n      if (next && radios.includes(next)) {\n        next.setFocus(ev);\n        if (!inSelectPopover) {\n          this.value = next.value;\n          this.emitValueChange(ev);\n        }\n      }\n      // Update the radio group value when a user presses the\n      // space bar on top of a selected radio\n      if ([' '].includes(ev.key)) {\n        const previousValue = this.value;\n        this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n        if (previousValue !== this.value || this.allowEmptySelection) {\n          /**\n           * Value change should only be emitted if the value is different,\n           * such as selecting a new radio with the space bar or if\n           * the radio group allows for empty selection and the user\n           * is deselecting a checked radio.\n           */\n          this.emitValueChange(ev);\n        }\n        // Prevent browsers from jumping\n        // to the bottom of the screen\n        ev.preventDefault();\n      }\n    }\n  }\n  render() {\n    const { label, labelId, el, name, value } = this;\n    const mode = getIonMode(this);\n    renderHiddenInput(true, el, name, value, false);\n    return h(Host, { role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode });\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"]\n  }; }\n}, [0, \"ion-radio-group\", {\n    \"allowEmptySelection\": [4, \"allow-empty-selection\"],\n    \"name\": [1],\n    \"value\": [1032]\n  }, [[4, \"keydown\", \"onKeydown\"]], {\n    \"value\": [\"valueChanged\"]\n  }]);\nlet radioGroupIds = 0;\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-radio-group\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-radio-group\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, RadioGroup);\n      }\n      break;\n  } });\n}\n\nexport { RadioGroup as R, defineCustomElement as d };\n",
      "start": 1700143042286,
      "end": 1700143042416,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143042416,
      "end": 1700143042416,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143042416,
      "end": 1700143042416,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143042416,
      "end": 1700143042416,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143042416,
      "end": 1700143042416,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143042417,
      "end": 1700143042417,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143042417,
      "end": 1700143042418,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700143042418,
      "end": 1700143042418,
      "order": "normal"
    }
  ]
}
