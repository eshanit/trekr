{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/ion-img.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { d as inheritAttributes } from './helpers.js';\nimport { b as getIonMode } from './ionic-global.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = /*@__PURE__*/ proxyCustomElement(class Img extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n    this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n    this.ionError = createEvent(this, \"ionError\", 7);\n    this.inheritedAttributes = {};\n    this.onLoad = () => {\n      this.ionImgDidLoad.emit();\n    };\n    this.onError = () => {\n      this.ionError.emit();\n    };\n    this.loadSrc = undefined;\n    this.loadError = undefined;\n    this.alt = undefined;\n    this.src = undefined;\n  }\n  srcChanged() {\n    this.addIO();\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['draggable']);\n  }\n  componentDidLoad() {\n    this.addIO();\n  }\n  addIO() {\n    if (this.src === undefined) {\n      return;\n    }\n    if (typeof window !== 'undefined' &&\n      'IntersectionObserver' in window &&\n      'IntersectionObserverEntry' in window &&\n      'isIntersecting' in window.IntersectionObserverEntry.prototype) {\n      this.removeIO();\n      this.io = new IntersectionObserver((data) => {\n        /**\n         * On slower devices, it is possible for an intersection observer entry to contain multiple\n         * objects in the array. This happens when quickly scrolling an image into view and then out of\n         * view. In this case, the last object represents the current state of the component.\n         */\n        if (data[data.length - 1].isIntersecting) {\n          this.load();\n          this.removeIO();\n        }\n      });\n      this.io.observe(this.el);\n    }\n    else {\n      // fall back to setTimeout for Safari and IE\n      setTimeout(() => this.load(), 200);\n    }\n  }\n  load() {\n    this.loadError = this.onError;\n    this.loadSrc = this.src;\n    this.ionImgWillLoad.emit();\n  }\n  removeIO() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  render() {\n    const { loadSrc, alt, onLoad, loadError, inheritedAttributes } = this;\n    const { draggable } = inheritedAttributes;\n    return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: loadSrc, alt: alt, onLoad: onLoad, onError: loadError, part: \"image\", draggable: isDraggable(draggable) })));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"src\": [\"srcChanged\"]\n  }; }\n  static get style() { return imgCss; }\n}, [1, \"ion-img\", {\n    \"alt\": [1],\n    \"src\": [1],\n    \"loadSrc\": [32],\n    \"loadError\": [32]\n  }, undefined, {\n    \"src\": [\"srcChanged\"]\n  }]);\n/**\n * Enumerated strings must be set as booleans\n * as Stencil will not render 'false' in the DOM.\n * The need to explicitly render draggable=\"true\"\n * as only certain elements are draggable by default.\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable.\n */\nconst isDraggable = (draggable) => {\n  switch (draggable) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      return undefined;\n  }\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-img\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-img\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Img);\n      }\n      break;\n  } });\n}\n\nconst IonImg = Img;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonImg, defineCustomElement };\n",
      "start": 1700143041092,
      "end": 1700143041255,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143041255,
      "end": 1700143041255,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143041256,
      "end": 1700143041256,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143041256,
      "end": 1700143041257,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700143041257,
      "end": 1700143041257,
      "order": "normal"
    }
  ]
}
