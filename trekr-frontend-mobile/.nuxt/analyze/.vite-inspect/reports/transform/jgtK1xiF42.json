{
  "resolvedId": "C:/Users/Admin/Documents/Projects/Tinashe/trekr/trekr-frontend/node_modules/@ionic/core/components/keyboard2.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { K as Keyboard } from './keyboard.js';\n\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\n// TODO(FW-2832): types\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n  const nativeEngine = Keyboard.getEngine();\n  /**\n   * If the native keyboard plugin is available\n   * then we are running in a native environment. As a result\n   * we should only listen on the native events instead of\n   * using the Visual Viewport as the Ionic webview manipulates\n   * how it resizes such that the Visual Viewport API is not\n   * reliable here.\n   */\n  if (nativeEngine) {\n    startNativeListeners(win);\n  }\n  else {\n    if (!win.visualViewport) {\n      return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    win.visualViewport.onresize = () => {\n      trackViewportChanges(win);\n      if (keyboardDidOpen() || keyboardDidResize(win)) {\n        setKeyboardOpen(win);\n      }\n      else if (keyboardDidClose(win)) {\n        setKeyboardClose(win);\n      }\n    };\n  }\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n  win.addEventListener('keyboardDidShow', (ev) => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return (!keyboardOpen &&\n    previousVisualViewport.width === currentVisualViewport.width &&\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: { keyboardHeight },\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale,\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n",
      "start": 1700143042376,
      "end": 1700143042529,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143042529,
      "end": 1700143042529,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700143042529,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700143042530,
      "end": 1700143042530,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700143042531,
      "end": 1700143042531,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700143042531,
      "end": 1700143042531,
      "order": "normal"
    }
  ]
}
